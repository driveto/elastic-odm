<?xml version="1.0"?>
<ruleset name="SpaceflowApi">
    <description>Library coding standards</description>

    <rule ref="Squiz.Classes.ClassDeclaration">
        <exclude name="Squiz.Classes.ClassDeclaration.EndFileAfterCloseBrace"/>
    </rule>
    <rule ref="Squiz.Classes.ClassFileName"/>
    <rule ref="Squiz.Classes.SelfMemberReference"/>
    <rule ref="Squiz.Classes.DuplicateProperty"/>
    <rule ref="Squiz.Classes.LowercaseClassKeywords"/>
    <rule ref="Squiz.Classes.SelfMemberReference"/>
    <rule ref="Squiz.Classes.ValidClassName"/>

    <!-- Include some sniffs from all around the place -->
    <rule ref="Squiz.Functions.FunctionDeclaration"/>
    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration"/>

    <rule ref="Squiz.Operators.ComparisonOperatorUsage"/>
    <rule ref="Squiz.Operators.IncrementDecrementUsage"/>
    <rule ref="Squiz.Operators.ValidLogicalOperators"/>

    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar"/>
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <rule ref="Squiz.PHP.CommentedOutCode"/>
    <rule ref="Squiz.PHP.DisallowInlineIf"/>
    <rule ref="Squiz.PHP.DisallowMultipleAssignments"/>
    <rule ref="Squiz.PHP.DiscouragedFunctions"/>
    <rule ref="Squiz.Scope.MemberVarScope"/>
    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Squiz.Scope.StaticThisUsage"/>
    <rule ref="Squiz.Strings.ConcatenationSpacing"/>
    <rule ref="Squiz.Strings.DoubleQuoteUsage"/>

    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <rule ref="Generic.Classes.DuplicateClassName"/>
    <rule ref="Generic.PHP.BacktickOperator"/>
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <rule ref="Generic.PHP.DisallowShortOpenTag"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Generic.PHP.NoSilencedErrors"/>
    <rule ref="Generic.Strings.UnnecessaryStringConcat"/>
    <rule ref="Generic.Functions.CallTimePassByReference"/>
    <rule ref="Generic.Metrics.NestingLevel">
        <properties>
            <property name="nestingLevel" value="3"/>
            <property name="absoluteNestingLevel" value="4"/>
        </properties>
    </rule>
    <rule ref="Generic.Metrics.CyclomaticComplexity">
        <properties>
            <property name="complexity" value="9"/>
            <property name="absoluteComplexity" value="10"/>
        </properties>
    </rule>
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="200"/>
            <property name="absoluteLineLimit" value="220"/>
        </properties>
    </rule>
    <!-- Use Unix newlines -->
    <!-- line endings are failing on windows -->
    <!--<rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>-->
    <rule ref="Generic.PHP.LowerCaseConstant"/>

    <rule ref="MySource.Objects.AssignThis"/>
    <rule ref="PEAR.ControlStructures.MultiLineCondition"/>
    <rule ref="PEAR.Files.IncludingFile"/>

    <!-- PSR2 file endings are failing on windows -->
    <!--<rule ref="PSR2.Files.EndFileNewline"/>-->
    <rule ref="PSR2.Methods.FunctionCallSignature"/>
    <rule ref="PSR2.Methods.MethodDeclaration"/>
    <rule ref="PSR2.Namespaces.NamespaceDeclaration"/>
    <rule ref="PSR2.Namespaces.UseDeclaration"/>
    <rule ref="PSR2.ControlStructures.ControlStructureSpacing"/>

</ruleset>
